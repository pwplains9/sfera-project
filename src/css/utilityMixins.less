/********************************
* Устанавливает размеры жлемента
********************************/
.set-size(@size) {
  width: @size;
  height: @size;
}

.set-size(@width, @height) {
  width: @width;
  height: @height;
}

/********************************************
* Установка placeholder-ра ддля полей ввода
*******************************************/
.placeholder(@color: @default-font-color) {
  &:-moz-placeholder {
    color: @color;
  }
  &::-moz-placeholder {
    color: @color;
  }
  &::-webkit-input-placeholder {
    color: @color;
  }
  &:-ms-input-placeholder {
    color: @color;
  }
}

/********************
* Строит колонки
*****************/

.n-columns(@min-width, @gutter, @max-columns, @last-equal: false) {
  .list {
    display: flex;
    flex-wrap: wrap;
    margin-left: -@gutter;
    margin-top: -@gutter;

    .item {
      flex: 1 0 @min-width;
      margin-left: @gutter;
      margin-top: @gutter;

      & when (@last-equal) {
        .mediaLoop(@counter) when (@counter <= @max-columns) {
          @screen-width: ((@min-width * @counter)+(@gutter * @counter));
          @column-width: (100%/@counter);

          @media (min-width: @screen-width) {
            max-width: ~'calc(@{column-width} - @{gutter})';
          }
          .mediaLoop((@counter + 1));
        }
        .mediaLoop(2);
      }

      @column-width: (100%/@max-columns);
      @min: (@min-width * @max-columns);
      @media (min-width: @min) {
        min-width: ~'calc(@{column-width} - @{gutter})';
      }
    }
  }
}

/**********************************
* Кастомный скролл
**********************************/

.scroll(@trackColor: @white, @thumbColor: @black, @width: 12px, @radius: 10px) {
  &::-webkit-scrollbar {
    width: @width;
  }

  &::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px fade(@trackColor, 30%);
    border-radius: @radius;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: @radius;
    -webkit-box-shadow: inset 0 0 6px fade(@thumbColor, 50%);
  }
}

/*********************************
* Установка параметров по кругу
**********************************/
.hand(@values, @prefix: ~"", @suffix: ~"", @sides: top right bottom left) {
  @val: ~"@{values}";
  @count: ~`'@{val}'.match(/(\S+)/g).length * 1`;
  @val-0: ~`'@{val}'.match(/(\S+)/g)[0]`;
  @val-1: ~`'@{val}'.match(/(\S+)/g)[1] || '@{val-0}'`;
  @val-2: ~`'@{val}'.match(/(\S+)/g)[2] || '@{val-0}'`;
  @val-3: ~`'@{val}'.match(/(\S+)/g)[3] || '@{val-1}' || '@{val-0}'`;
  @pre: ~`'@{prefix}' ? '@{prefix}-' : ''`;
  @suf: ~`'@{suffix}' ? '-@{suffix}' : ''`;

  .output() when not (@val-0 = _) {
    @side: extract(@sides, 1);
      @{pre}@{side}@{suf}: @val-0;
  }
  .output() when not (@val-1 = _) {
    @side: extract(@sides, 2);
      @{pre}@{side}@{suf}: @val-1;
  }
  .output() when not (@val-2 = _) {
    @side: extract(@sides, 3);
      @{pre}@{side}@{suf}: @val-2;
  }
  .output() when not (@val-3 = _) {
    @side: extract(@sides, 4);
      @{pre}@{side}@{suf}: @val-3;
  }

  .output();
}

.absolute(...) {
  position: absolute;
  .hand(@arguments);
}

.fixed(...) {
  position: fixed;
  .hand(@arguments);
}

.relative(...) {
  position: relative;
  .hand(@arguments);
}

.padding(...) {
  .hand(@arguments, padding);
}

.margin(...) {
  .hand(@arguments, margin);
}

.border-color(...) {
  .hand(@arguments, border, color);
}

.border-style(...) {
  .hand(@arguments, border, style);
}

.border-width(...) {
  .hand(@arguments, border, width);
}